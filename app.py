import os
import logging
import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
YANDEX_API_KEY = os.getenv('YANDEX_API_KEY')  # –ù–æ–≤—ã–π –∫–ª—é—á!
ADMIN_ID = os.getenv('ADMIN_ID')
BOT_NAME = os.getenv('BOT_NAME', 'BlockesAIBot')

# –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
logging.info("=== Yandex GPT Bot Starting ===")
logging.info(f"BOT_NAME: {BOT_NAME}")
logging.info(f"TELEGRAM_BOT_TOKEN: {'SET' if TELEGRAM_BOT_TOKEN else 'MISSING'}")
logging.info(f"YANDEX_API_KEY: {'SET' if YANDEX_API_KEY else 'MISSING'}")

async def yandex_gpt(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å Yandex GPT API"""
    try:
        logging.info(f"Sending request to Yandex GPT: {message[:50]}...")
        
        if not YANDEX_API_KEY:
            logging.error("YANDEX_API_KEY is missing!")
            return None

        headers = {
            "Authorization": f"Api-Key {YANDEX_API_KEY}",
            "Content-Type": "application/json"
        }
        
        data = {
            "modelUri": "gpt://b1gvmk9u7ea7lpg4g86r/yandexgpt/latest",
            "completionOptions": {
                "stream": False,
                "temperature": 0.6,
                "maxTokens": 1000
            },
            "messages": [
                {
                    "role": "user",
                    "text": message
                }
            ]
        }
        
        logging.info("Making request to Yandex GPT API...")
        
        response = requests.post(
            "https://llm.api.cloud.yandex.net/foundationModels/v1/completion",
            headers=headers,
            json=data,
            timeout=30
        )
        
        logging.info(f"Yandex GPT response status: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            if 'result' in result and 'alternatives' in result['result']:
                ai_response = result['result']['alternatives'][0]['message']['text']
                logging.info(f"Yandex GPT response: {len(ai_response)} characters")
                return ai_response
            else:
                logging.error("Unexpected response format")
                return None
        else:
            logging.error(f"Yandex GPT API error {response.status_code}: {response.text}")
            return None
            
    except requests.exceptions.Timeout:
        logging.error("Yandex GPT API timeout")
        return None
    except requests.exceptions.ConnectionError:
        logging.error("Yandex GPT API connection error")
        return None
    except Exception as e:
        logging.error(f"Yandex GPT API unexpected error: {str(e)}")
        return None

async def gpt_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /GTP"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –ª–∏ –≥—Ä—É–ø–ø–∞
        chat_id = update.effective_chat.id
        allowed_groups = os.getenv('ALLOWED_GROUP_IDS', 'all')
        
        if allowed_groups != 'all' and str(chat_id) not in allowed_groups.split(','):
            await update.message.reply_text("‚ùå –ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        user_message = ' '.join(context.args)
        
        if not user_message:
            await update.message.reply_text(
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /GTP.\n'
                '–ü—Ä–∏–º–µ—Ä: /GTP "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"'
            )
            return
        
        # –£–¥–∞–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if user_message.startswith('"') and user_message.endswith('"'):
            user_message = user_message[1:-1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(user_message) > 2000:
            await update.message.reply_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        logging.info(f"User request from {chat_id}: {user_message[:100]}...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        processing_message = await update.message.reply_text("ü§î –î—É–º–∞—é...")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Yandex GPT
        ai_response = await yandex_gpt(user_message)
        
        if ai_response is None:
            # Fallback –æ—Ç–≤–µ—Ç
            ai_response = f"ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å: '{user_message}'\n\n" \
                         "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Yandex GPT. " \
                         "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É!"
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–î—É–º–∞—é" –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        try:
            await context.bot.delete_message(
                chat_id=chat_id,
                message_id=processing_message.message_id
            )
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–∏
        if len(ai_response) > 4000:
            for i in range(0, len(ai_response), 4000):
                await update.message.reply_text(ai_response[i:i+4000])
        else:
            await update.message.reply_text(ai_response)
        
        logging.info("Response sent successfully")
        
    except Exception as e:
        logging.error(f"Error in GTP command: {e}")
        await update.message.reply_text("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        f'ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø {BOT_NAME} - –±–æ—Ç —Å Yandex GPT AI.\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /GTP "–≤–∞—à –≤–æ–ø—Ä–æ—Å" –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π.\n\n'
        '–ü—Ä–∏–º–µ—Ä: /GTP "–ù–∞–ø–∏—à–∏ —Ä–µ—Ü–µ–ø—Ç –ø–∞—Å—Ç—ã"\n'
        '–ü—Ä–∏–º–µ—Ä: /GTP "–û–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—É—é —Ñ–∏–∑–∏–∫—É"'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = f"""
ü§ñ **{BOT_NAME} - –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**

/GTP "–≤–∞—à –≤–æ–ø—Ä–æ—Å" - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
/GTP "–ù–∞–ø–∏—à–∏ —Ä–µ—Ü–µ–ø—Ç –ø–∞—Å—Ç—ã –∫–∞—Ä–±–æ–Ω–∞—Ä–∞"
/GTP "–û–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—É—é —Ñ–∏–∑–∏–∫—É –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏"
/GTP "–ü–æ–º–æ–≥–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –Ω–∞ Python"

‚ö° **Powered by Yandex GPT**
    """
    await update.message.reply_text(help_text)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logging.error(f"Update {update} caused error {context.error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    if not TELEGRAM_BOT_TOKEN:
        logging.error("‚ùå CRITICAL: TELEGRAM_BOT_TOKEN is not set!")
        return
    
    if not YANDEX_API_KEY:
        logging.error("‚ùå CRITICAL: YANDEX_API_KEY is not set!")
        logging.error("‚ùå Get your API key from: https://yandex.cloud/")
        return
    
    logging.info("‚úÖ All environment variables are set correctly")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("gpt", gpt_command))
        application.add_handler(CommandHandler("GTP", gpt_command))
        application.add_handler(CommandHandler("help", help_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logging.info(f"üöÄ {BOT_NAME} starting with Yandex GPT API...")
        application.run_polling(
            drop_pending_updates=True,
            allowed_updates=Update.ALL_TYPES
        )
        
    except Exception as e:
        logging.error(f"Failed to start bot: {e}")

if __name__ == '__main__':
    main()
